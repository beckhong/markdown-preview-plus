"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const path = require("path");
const fs = require("fs");
class UserStylesManager {
    constructor() {
        this.numUsers = 0;
        this.disposables = new atom_1.CompositeDisposable();
        this.fileDisposables = new atom_1.CompositeDisposable();
        this.subscribers = new Set();
        this.files = [];
        this.configDir = new atom_1.Directory(path.join(atom.getConfigDirPath(), 'markdown-preview-plus'));
        if (!this.configDir.existsSync()) {
            fs.mkdirSync(this.configDir.getPath());
        }
        this.disposables.add(this.fileDisposables, this.configDir.onDidChange(() => {
            this.didChangeDirContents();
        }));
        this.files = this.getDirContents();
    }
    static subscribe(callback) {
        const inst = UserStylesManager.instance();
        const disp = new atom_1.CompositeDisposable();
        disp.add(inst, inst.subscribe(callback));
        return disp;
    }
    static getStyleFiles(context) {
        const inst = UserStylesManager._instance;
        if (inst) {
            return inst.files.filter((file) => {
                const fileInfo = path.parse(file);
                const fileName = fileInfo.name.toLowerCase();
                const fileHasContext = fileName.match(/--[a-z]+$/) !== null;
                const fileContextMatches = fileHasContext && fileName.endsWith(`--${context}`);
                return !fileHasContext || fileContextMatches;
            });
        }
        else
            return [];
    }
    static instance() {
        if (UserStylesManager._instance === undefined) {
            UserStylesManager._instance = new UserStylesManager();
        }
        UserStylesManager._instance.numUsers += 1;
        return UserStylesManager._instance;
    }
    dispose() {
        this.numUsers -= 1;
        if (this.numUsers === 0) {
            this.disposables.dispose();
            UserStylesManager._instance = undefined;
        }
    }
    subscribe(callback) {
        this.subscribers.add(callback);
        return new atom_1.Disposable(() => {
            this.subscribers.delete(callback);
        });
    }
    didChangeDirContents() {
        this.files = this.getDirContents();
        this.notifySubscribers();
    }
    getDirContents() {
        const entries = this.configDir.getEntriesSync();
        return entries
            .filter((entry) => {
            if (entry.isDirectory())
                return false;
            const filePath = entry.getPath().toLowerCase();
            return filePath.endsWith('.less') || filePath.endsWith('.css');
        })
            .map((file) => file.getPath());
    }
    notifySubscribers() {
        for (const cb of this.subscribers.values()) {
            cb();
        }
    }
}
exports.UserStylesManager = UserStylesManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1zdHlsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFya2Rvd24tcHJldmlldy12aWV3L3VzZXItc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQWlFO0FBQ2pFLDZCQUE0QjtBQUM1Qix5QkFBd0I7QUFFeEIsTUFBYSxpQkFBaUI7SUFVNUI7UUFOUSxhQUFRLEdBQUcsQ0FBQyxDQUFBO1FBQ1osZ0JBQVcsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDdkMsb0JBQWUsR0FBRyxJQUFJLDBCQUFtQixFQUFFLENBQUE7UUFDM0MsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBYyxDQUFBO1FBQ25DLFVBQUssR0FBYSxFQUFFLENBQUE7UUFHMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGdCQUFTLENBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsdUJBQXVCLENBQUMsQ0FDNUQsQ0FBQTtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO1NBQ3ZDO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQ2xCLElBQUksQ0FBQyxlQUFlLEVBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUM5QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQTtRQUM3QixDQUFDLENBQUMsQ0FDSCxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7SUFDcEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBb0I7UUFDMUMsTUFBTSxJQUFJLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDekMsTUFBTSxJQUFJLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN4QyxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFTSxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQXlDO1FBQ25FLE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQTtRQUN4QyxJQUFJLElBQUksRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDakMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtnQkFDNUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLENBQUE7Z0JBQzNELE1BQU0sa0JBQWtCLEdBQ3RCLGNBQWMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssT0FBTyxFQUFFLENBQUMsQ0FBQTtnQkFDckQsT0FBTyxDQUFDLGNBQWMsSUFBSSxrQkFBa0IsQ0FBQTtZQUM5QyxDQUFDLENBQUMsQ0FBQTtTQUNIOztZQUFNLE9BQU8sRUFBRSxDQUFBO0lBQ2xCLENBQUM7SUFFTyxNQUFNLENBQUMsUUFBUTtRQUNyQixJQUFJLGlCQUFpQixDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDN0MsaUJBQWlCLENBQUMsU0FBUyxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQTtTQUN0RDtRQUNELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFBO1FBQ3pDLE9BQU8saUJBQWlCLENBQUMsU0FBUyxDQUFBO0lBQ3BDLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUE7UUFDbEIsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFBO1lBQzFCLGlCQUFpQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7U0FDeEM7SUFDSCxDQUFDO0lBRU8sU0FBUyxDQUFDLFFBQW9CO1FBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzlCLE9BQU8sSUFBSSxpQkFBVSxDQUFDLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNuQyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFTyxvQkFBb0I7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDbEMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFDMUIsQ0FBQztJQUVPLGNBQWM7UUFDcEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUMvQyxPQUFPLE9BQU87YUFDWCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoQixJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7Z0JBQUUsT0FBTyxLQUFLLENBQUE7WUFDckMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQzlDLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2hFLENBQUMsQ0FBQzthQUNELEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDbEMsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixLQUFLLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDMUMsRUFBRSxFQUFFLENBQUE7U0FDTDtJQUNILENBQUM7Q0FDRjtBQTNGRCw4Q0EyRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RvcnksIENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnXG5cbmV4cG9ydCBjbGFzcyBVc2VyU3R5bGVzTWFuYWdlciB7XG4gIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZT86IFVzZXJTdHlsZXNNYW5hZ2VyXG5cbiAgcHJpdmF0ZSBjb25maWdEaXI6IERpcmVjdG9yeVxuICBwcml2YXRlIG51bVVzZXJzID0gMFxuICBwcml2YXRlIGRpc3Bvc2FibGVzID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICBwcml2YXRlIGZpbGVEaXNwb3NhYmxlcyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKClcbiAgcHJpdmF0ZSBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuICBwcml2YXRlIGZpbGVzOiBzdHJpbmdbXSA9IFtdXG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbmZpZ0RpciA9IG5ldyBEaXJlY3RvcnkoXG4gICAgICBwYXRoLmpvaW4oYXRvbS5nZXRDb25maWdEaXJQYXRoKCksICdtYXJrZG93bi1wcmV2aWV3LXBsdXMnKSxcbiAgICApXG4gICAgaWYgKCF0aGlzLmNvbmZpZ0Rpci5leGlzdHNTeW5jKCkpIHtcbiAgICAgIGZzLm1rZGlyU3luYyh0aGlzLmNvbmZpZ0Rpci5nZXRQYXRoKCkpXG4gICAgfVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgdGhpcy5maWxlRGlzcG9zYWJsZXMsXG4gICAgICB0aGlzLmNvbmZpZ0Rpci5vbkRpZENoYW5nZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGlkQ2hhbmdlRGlyQ29udGVudHMoKVxuICAgICAgfSksXG4gICAgKVxuICAgIHRoaXMuZmlsZXMgPSB0aGlzLmdldERpckNvbnRlbnRzKClcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc3Vic2NyaWJlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgaW5zdCA9IFVzZXJTdHlsZXNNYW5hZ2VyLmluc3RhbmNlKClcbiAgICBjb25zdCBkaXNwID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgIGRpc3AuYWRkKGluc3QsIGluc3Quc3Vic2NyaWJlKGNhbGxiYWNrKSlcbiAgICByZXR1cm4gZGlzcFxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRTdHlsZUZpbGVzKGNvbnRleHQ6ICdwZGYnIHwgJ2NvcHknIHwgJ2h0bWwnIHwgJ2xpdmUnKSB7XG4gICAgY29uc3QgaW5zdCA9IFVzZXJTdHlsZXNNYW5hZ2VyLl9pbnN0YW5jZVxuICAgIGlmIChpbnN0KSB7XG4gICAgICByZXR1cm4gaW5zdC5maWxlcy5maWx0ZXIoKGZpbGUpID0+IHtcbiAgICAgICAgY29uc3QgZmlsZUluZm8gPSBwYXRoLnBhcnNlKGZpbGUpXG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZUluZm8ubmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGNvbnN0IGZpbGVIYXNDb250ZXh0ID0gZmlsZU5hbWUubWF0Y2goLy0tW2Etel0rJC8pICE9PSBudWxsXG4gICAgICAgIGNvbnN0IGZpbGVDb250ZXh0TWF0Y2hlcyA9XG4gICAgICAgICAgZmlsZUhhc0NvbnRleHQgJiYgZmlsZU5hbWUuZW5kc1dpdGgoYC0tJHtjb250ZXh0fWApXG4gICAgICAgIHJldHVybiAhZmlsZUhhc0NvbnRleHQgfHwgZmlsZUNvbnRleHRNYXRjaGVzXG4gICAgICB9KVxuICAgIH0gZWxzZSByZXR1cm4gW11cbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlKCkge1xuICAgIGlmIChVc2VyU3R5bGVzTWFuYWdlci5faW5zdGFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgVXNlclN0eWxlc01hbmFnZXIuX2luc3RhbmNlID0gbmV3IFVzZXJTdHlsZXNNYW5hZ2VyKClcbiAgICB9XG4gICAgVXNlclN0eWxlc01hbmFnZXIuX2luc3RhbmNlLm51bVVzZXJzICs9IDFcbiAgICByZXR1cm4gVXNlclN0eWxlc01hbmFnZXIuX2luc3RhbmNlXG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICB0aGlzLm51bVVzZXJzIC09IDFcbiAgICBpZiAodGhpcy5udW1Vc2VycyA9PT0gMCkge1xuICAgICAgdGhpcy5kaXNwb3NhYmxlcy5kaXNwb3NlKClcbiAgICAgIFVzZXJTdHlsZXNNYW5hZ2VyLl9pbnN0YW5jZSA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGRpZENoYW5nZURpckNvbnRlbnRzKCkge1xuICAgIHRoaXMuZmlsZXMgPSB0aGlzLmdldERpckNvbnRlbnRzKClcbiAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKClcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGlyQ29udGVudHMoKSB7XG4gICAgY29uc3QgZW50cmllcyA9IHRoaXMuY29uZmlnRGlyLmdldEVudHJpZXNTeW5jKClcbiAgICByZXR1cm4gZW50cmllc1xuICAgICAgLmZpbHRlcigoZW50cnkpID0+IHtcbiAgICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkpIHJldHVybiBmYWxzZVxuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGVudHJ5LmdldFBhdGgoKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIHJldHVybiBmaWxlUGF0aC5lbmRzV2l0aCgnLmxlc3MnKSB8fCBmaWxlUGF0aC5lbmRzV2l0aCgnLmNzcycpXG4gICAgICB9KVxuICAgICAgLm1hcCgoZmlsZSkgPT4gZmlsZS5nZXRQYXRoKCkpXG4gIH1cblxuICBwcml2YXRlIG5vdGlmeVN1YnNjcmliZXJzKCkge1xuICAgIGZvciAoY29uc3QgY2Igb2YgdGhpcy5zdWJzY3JpYmVycy52YWx1ZXMoKSkge1xuICAgICAgY2IoKVxuICAgIH1cbiAgfVxufVxuIl19